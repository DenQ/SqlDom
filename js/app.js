// Generated by CoffeeScript 1.9.3
var IParser, Parser, ParserDelete, ParserInsert, ParserSelect, ParserUpdate, SqlDom,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SqlDom = (function() {
  function SqlDom(query) {
    console.log(query);
    return this;
  }

  return SqlDom;

})();

SqlDom('select * from .container');

IParser = (function() {
  function IParser(query1) {
    this.query = query1;
    throw false;
  }

  IParser.prototype.ICan = function() {
    throw false;
  };

  return IParser;

})();

Parser = (function() {
  Parser.prototype.query = null;

  Parser.prototype.parsers = [];

  Parser.prototype.parser = null;

  function Parser(query1) {
    this.query = query1;
    this.InitParsers();
    this.parser = this.GetParser();
    if (this.parser === false) {
      throw false;
    }
    return this.parser;
  }

  Parser.prototype.InitParsers = function() {
    return this.parsers = [new ParserSelect(this.query), new ParserInsert(this.query), new ParserUpdate(this.query), new ParserDelete(this.query)];
  };

  Parser.prototype.GetParser = function() {
    var i, item, len, ref;
    if (this.parser != null) {
      return this.parser;
    }
    ref = this.parsers;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      if (item.ICan() === true) {
        return item;
      }
    }
    return false;
  };

  return Parser;

})();

ParserDelete = (function(superClass) {
  extend(ParserDelete, superClass);

  function ParserDelete(query1) {
    this.query = query1;
    this;
  }

  ParserDelete.prototype.ICan = function() {
    return _.startsWith(this.query, 'delete ');
  };

  return ParserDelete;

})(IParser);

ParserInsert = (function(superClass) {
  extend(ParserInsert, superClass);

  function ParserInsert(query1) {
    this.query = query1;
    this;
  }

  ParserInsert.prototype.ICan = function() {
    return _.startsWith(this.query, 'insert into ');
  };

  return ParserInsert;

})(IParser);

ParserSelect = (function(superClass) {
  extend(ParserSelect, superClass);

  function ParserSelect(query1) {
    this.query = query1;
    this;
  }

  ParserSelect.prototype.ICan = function() {
    return _.startsWith(this.query, 'select ');
  };

  return ParserSelect;

})(IParser);

ParserUpdate = (function(superClass) {
  extend(ParserUpdate, superClass);

  function ParserUpdate(query1) {
    this.query = query1;
    this;
  }

  ParserUpdate.prototype.ICan = function() {
    return _.startsWith(this.query, 'update ');
  };

  return ParserUpdate;

})(IParser);
